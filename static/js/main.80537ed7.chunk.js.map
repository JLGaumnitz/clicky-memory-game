{"version":3,"sources":["images/Adventures_of_Pippi_Longstocking.jpg","images/Black_Beauty.jpg","images/Boxcar_Children.jpg","images/Charlie_and_the_Chocolate_Factory.jpg","images/Charlottes_Web.jpg","images/Heidi.jpg","images/Little_Women.jpg","images/The_Hobbit.jpg","images/The_Lion_the_Witch_and_the_Wardrobe.jpg","images/The_Wizard_of_Oz.jpg","images/Wind_in_the_Willows.jpg","images/Winnie_the_Pooh.jpg","components/Navbar/Navbar.js","components/Cover/Cover.js","components/Container/Container.js","components/Banner/Banner.js","images.js","components/ClickyGame.js","index.js"],"names":["module","exports","Navbar","props","className","navMsgColor","navMessage","score","highScore","Cover","onClick","e","clickEvent","target","src","name","alt","Container","shake","covers","map","a","i","key","Banner","images","pippi","horse","boxcar","charlie","charlotte","heidi","women","hobbit","lion","oz","willows","pooh","ClickyGame","state","allCovers","shuffleArray","wasClicked","checkClicked","bind","newArr","slice","shuffleArr","length","push","splice","Math","floor","random","clickedElem","prevState","this","shuffled","includes","setState","setTimeout","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.80537ed7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Adventures_of_Pippi_Longstocking.9f2f0df5.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Black_Beauty.f9e42b00.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Boxcar_Children.507d8fc4.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Charlie_and_the_Chocolate_Factory.b344fe59.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Charlottes_Web.6c977301.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Heidi.cb8e66bf.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Little_Women.d952d1af.jpg\";","module.exports = __webpack_public_path__ + \"static/media/The_Hobbit.db8ced05.jpg\";","module.exports = __webpack_public_path__ + \"static/media/The_Lion_the_Witch_and_the_Wardrobe.83b80cba.jpg\";","module.exports = __webpack_public_path__ + \"static/media/The_Wizard_of_Oz.db24fdf3.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Wind_in_the_Willows.0266ad47.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Winnie_the_Pooh.ef33f47c.jpg\";","import React from 'react';\r\nimport './Navbar.css';\r\n\r\nconst Navbar = props => (\r\n  <div className=\"navbar \">\r\n  \r\n    <div className={props.navMsgColor}>{props.navMessage}</div>\r\n    <div>\r\n      Score: {props.score} <span className=\"pipe\">|</span> High Score: {props.highScore}\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default Navbar;","import React from 'react';\r\nimport './Cover.css';\r\n\r\n// the onClick function is defined as a callback so that the clicked elements value\r\n// can be passed to props.clickEvent to check if the image has been clicked or not\r\nconst Cover = props => (\r\n  <div className=\"card\" onClick={e => props.clickEvent(e.target.src)}>\r\n\r\n    <img className=\"card-img-top card-height\" src={props.name} alt=\"\" />\r\n    \r\n  </div>\r\n);\r\n\r\nexport default Cover;","import React from 'react';\r\nimport './Container.css';\r\nimport Cover from '../Cover';\r\n\r\n// main container for each Book Cover component\r\n// loops through each index in props.covers, which contains an array of book cover images\r\n// to create a new Cover component for each image\r\n// attaches the passed down clickEvent function to each Cover component\r\nconst Container = props => (\r\n  // loops through\r\n  <div\r\n    className={\r\n      props.shake\r\n        ? 'container d-flex flex-wrap justify-content-center shake'\r\n        : 'container d-flex flex-wrap justify-content-center'\r\n    }\r\n  >\r\n    {props.covers.map((a, i) => <Cover name={a} key={i} clickEvent={props.clickEvent} />)}\r\n  </div>\r\n);\r\n\r\nexport default Container;","  \r\nimport React from 'react';\r\nimport './Banner.css';\r\n\r\nconst Banner = () => (\r\n  <div className=\"banner text-center d-flex align-items-center justify-content-center\">\r\n\r\n    <p className=\"m-0\">Click on each beloved Children's Classic to earn up to 12 points.\r\n     <br></br>\r\n     Click on the same cover twice and the count starts over.</p>\r\n\r\n  </div>\r\n);\r\n\r\nexport default Banner;","import pippi from './images/Adventures_of_Pippi_Longstocking.jpg';\r\nimport horse from './images/Black_Beauty.jpg';\r\nimport boxcar from './images/Boxcar_Children.jpg';\r\nimport charlie from './images/Charlie_and_the_Chocolate_Factory.jpg';\r\nimport charlotte from './images/Charlottes_Web.jpg';\r\nimport heidi from './images/Heidi.jpg';\r\nimport women from './images/Little_Women.jpg';\r\nimport hobbit from './images/The_Hobbit.jpg';\r\nimport lion from './images/The_Lion_the_Witch_and_the_Wardrobe.jpg';\r\nimport oz from './images/The_Wizard_of_Oz.jpg';\r\nimport willows from './images/Wind_in_the_Willows.jpg';\r\nimport pooh from './images/Winnie_the_Pooh.jpg';\r\n\r\nconst images = [\r\n  pippi,\r\n  horse,\r\n  boxcar,\r\n  charlie,\r\n  charlotte,\r\n  heidi,\r\n  women,\r\n  hobbit,\r\n  lion,\r\n  oz,\r\n  willows,\r\n  pooh\r\n];\r\n\r\nexport default images;","import React, { Component } from 'react';\r\nimport Navbar from './Navbar';\r\nimport Container from './Container';\r\nimport Banner from './Banner';\r\nimport images from '../images';\r\n\r\nclass ClickyGame extends Component {\r\n  state = {\r\n    score: 0,\r\n    highScore: 0,\r\n\r\n    // stores the class value to assign to navMessage based on a good or bad click\r\n    navMsgColor: '',\r\n\r\n    // contains intro, success, and failure message\r\n    navMessage: 'Click any book to begin.',\r\n\r\n    // contains an array of image urls\r\n    allCovers: this.shuffleArray(),\r\n\r\n    // will track each clicked element.\r\n    wasClicked: [],\r\n\r\n    // shakes the container on an incorrect guess if set to true\r\n    shake: false\r\n  };\r\n\r\n  // binds the current this context to checkClicked to have access to the current state\r\n  // when passed down to the Cover component\r\n  clickEvent = this.checkClicked.bind(this);\r\n\r\n  // used to shuffle the array of images when the DOM loads, and when an image is clicked\r\n  shuffleArray() {\r\n    // creates a copy of the current Covers array to modify it by value, and not by reference\r\n    const newArr = images.slice();\r\n\r\n    // will store the shuffled array\r\n    const shuffleArr = [];\r\n\r\n    // each loop through an index gets spliced from newArr, reducing its length\r\n    // gets a random index based off the current length of newArr\r\n    // splices the value from newArr, and pushes it to shuffleArr\r\n    while (newArr.length > 0) {\r\n      shuffleArr.push(newArr.splice(Math.floor(Math.random() * newArr.length), 1)[0]);\r\n    }\r\n\r\n    return shuffleArr;\r\n  }\r\n\r\n  checkClicked(clickedElem) {\r\n    // creates a copy of the wasClicked array to modify it by value, and not by reference. wasClicked stores all previous clicked images\r\n    const prevState = this.state.wasClicked.slice();\r\n\r\n    // shuffles the images\r\n    const shuffled = this.shuffleArray();\r\n\r\n    // tracks score\r\n    let score = this.state.score;\r\n    let highScore = this.state.highScore;\r\n\r\n    // if the clicked item is not in wasClicked, then it hasn't been clicked and the score is increased\r\n    if (!this.state.wasClicked.includes(clickedElem)) {\r\n      // if score and highScore are the same, then there is a new highScore value\r\n      if (score === highScore) {\r\n        score++;\r\n        highScore++;\r\n\r\n        // if they are not equal, then only increase the score value\r\n      } else {\r\n        score++;\r\n      }\r\n\r\n      // adds the clicked item to wasClicked to track that it has been clicked\r\n      prevState.push(clickedElem);\r\n    }\r\n\r\n    // resets the current score if the same element was clicked twice\r\n    if (this.state.wasClicked.includes(clickedElem)) {\r\n      let score = 0;\r\n      return this.setState({\r\n        score: score,\r\n        highScore: highScore,\r\n        navMsgColor: 'incorrect',\r\n        navMessage: 'Incorrect! Begin again ...',\r\n        allCovers: shuffled,\r\n        wasClicked: [],\r\n        shake: true\r\n      });\r\n    }\r\n\r\n    // if this runs, then the same element has NOT been clicked twice and the score is incremented\r\n    this.setState({\r\n      score: score,\r\n      highScore: highScore,\r\n      navMsgColor: 'correct',\r\n      navMessage: 'Correct!',\r\n      allCovers: shuffled,\r\n      wasClicked: prevState,\r\n      shake: false\r\n    });\r\n\r\n    // removes the yellow correct indicator on a successful click after .5s to re-render the class on each success\r\n    return setTimeout(() => this.setState({ navMsgColor: '' }), 500);\r\n  }\r\n\r\n  // renders score to the navbar.\r\n  // passes the randomized state.allCovers array to Container to create a Cover component for each image.\r\n  // passes the this.checkClicked down to container to pass to each Cover component to be used for the click event.\r\n  render() {\r\n    const state = this.state;\r\n    return (\r\n      <div>\r\n        <Navbar\r\n          score={state.score}\r\n          highScore={state.highScore}\r\n          navMessage={state.navMessage}\r\n          navMsgColor={state.navMsgColor}\r\n        />\r\n        <Banner />\r\n        <Container\r\n          shake={state.shake}\r\n          covers={state.allCovers}\r\n          clickEvent={this.clickEvent}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ClickyGame;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport ClickyGame from './components/ClickyGame';\nimport './index.css';\n\nReactDOM.render(<ClickyGame />, document.getElementById('root'));\n\n"],"sourceRoot":""}